{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/parkyoonsoo/Documents/GitHub/honsool-changyoong/src/routers/Content.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { load, Webcam } from '@teachablemachine/image';\nimport * as tf from '@tensorflow/tfjs';\nimport * as tmImage from '@teachablemachine/image';\nimport ImageUploader from 'react-images-upload';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Radio from '@material-ui/core/Radio';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport HeaderContent from '../component/HeaderContent.js';\nimport cass from \"../static/wordCloud/cass.jpeg\";\nimport jinro from \"../static/wordCloud/jinro.jpeg\";\nimport cham from \"../static/wordCloud/cham.jpeg\";\nimport bud from \"../static/wordCloud/bud.jpeg\";\nimport guin from \"../static/wordCloud/guin.jpeg\";\nimport jeju from \"../static/wordCloud/jeju.jpeg\";\nimport tsing from \"../static/wordCloud/tsing.jpeg\";\nimport blanc from \"../static/wordCloud/blanc.jpeg\";\nimport chung from \"../static/wordCloud/chung.jpeg\";\nimport blanc_con from \"../static/recommend/blanc.jpeg\";\nimport chung_con from \"../static/recommend/chung.jpeg\";\nimport jinro_con from \"../static/recommend/jinro.jpeg\";\nconst URL = \"https://teachablemachine.withgoogle.com/models/smWPBnKM4/\";\nlet model, labelContainer, maxPredictions;\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1,\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    '& > *': {\n      margin: theme.spacing(1)\n    }\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary\n  }\n})); // Load the image model and setup the webcam\n\nasync function init() {\n  const modelURL = URL + \"model.json\";\n  const metadataURL = URL + \"metadata.json\"; // load the model and metadata\n  // Refer to tmImage.loadFromFiles() in the API to support files from a file picker\n  // or files from your local hard drive\n  // Note: the pose library adds \"tmImage\" object to your window (window.tmImage)\n\n  model = await tmImage.load(modelURL, metadataURL);\n  maxPredictions = model.getTotalClasses();\n  labelContainer = document.getElementById(\"label-container\");\n\n  for (let i = 0; i < maxPredictions; i++) {\n    // and class labels\n    labelContainer.appendChild(document.createElement(\"div\"));\n  }\n\n  console.log('on');\n}\n\nasync function predict() {\n  // predict can take in an image, video or canvas html element\n  try {\n    // console.log(webcam.canvas);\n    var image = document.getElementsByClassName(\"uploadPicture\")[0];\n    const prediction = await model.predict(image, false);\n    console.log(\"success\");\n    prediction.sort(function (a, b) {\n      return b.probability - a.probability;\n    });\n    const classPrediction = prediction[0].className + \": \" + prediction[0].probability.toFixed(2);\n\n    switch (prediction[0].className) {\n      case \"cham\":\n        labelContainer.childNodes[0].innerHTML = \"<img src=\" + cham + \">\";\n        break;\n\n      case \"bud\":\n        labelContainer.childNodes[0].innerHTML = \"<img src=\" + bud + \">\";\n        break;\n\n      case \"tsing\":\n        labelContainer.childNodes[0].innerHTML = \"<img src=\" + tsing + \">\";\n        break;\n\n      case \"blanc\":\n        labelContainer.childNodes[0].innerHTML = \"<img src=\" + blanc + \">\";\n        labelContainer.childNodes[1].innerHTML = \"<img src=\" + blanc_con + \">\";\n        break;\n\n      case \"jinro\":\n        labelContainer.childNodes[0].innerHTML = \"<img src=\" + jinro + \">\";\n        labelContainer.childNodes[1].innerHTML = \"<img src=\" + jinro_con + \">\";\n        break;\n\n      case \"cass\":\n        labelContainer.childNodes[0].innerHTML = \"<img src=\" + cass + \">\";\n        break;\n\n      case \"chung\":\n        labelContainer.childNodes[0].innerHTML = \"<img src=\" + chung + \">\";\n        labelContainer.childNodes[1].innerHTML = \"<img src=\" + chung_con + \">\";\n        break;\n\n      case \"guin\":\n        labelContainer.childNodes[0].innerHTML = \"<img src=\" + guin + \">\";\n        break;\n\n      case \"jeju\":\n        labelContainer.childNodes[0].innerHTML = \"<img src=\" + jeju + \">\";\n        break;\n\n      default:\n        var SorryText = \"아직 이 술은 준비가 안되었네요, 죄송해요!\";\n        labelContainer.childNodes[0].innerHTML = SorryText;\n    }\n  } catch (err) {\n    console.log(\"fail\");\n  }\n}\n\nlet picture, setPicture;\n\nconst Content = () => {\n  _s();\n\n  const classes = useStyles();\n  const [picture, setPicture] = useState([]);\n\n  const onDrop = picture => {\n    setPicture(picture);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(HeaderContent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1,\n        flexDirection: 'row',\n        marginLeft: 30,\n        marginRight: 30\n      },\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        style: {\n          flex: 1\n        },\n        children: /*#__PURE__*/_jsxDEV(Paper, {\n          className: classes.paper,\n          children: [/*#__PURE__*/_jsxDEV(ImageUploader, {\n            withIcon: true,\n            buttonText: \"\\uC774\\uBBF8\\uC9C0\\uB97C \\uC120\\uD0DD\\uD558\\uC138\\uC694\",\n            onChange: onDrop,\n            imgExtension: ['.jpg', '.gif', '.png', '.gif', '.jpeg'],\n            maxFileSize: 5242880,\n            withPreview: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              padding: 20\n            },\n            children: /*#__PURE__*/_jsxDEV(ButtonGroup, {\n              color: \"primary\",\n              \"aria-label\": \"outlined primary button group\",\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                onClick: () => {\n                  init();\n                },\n                children: \"Start\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 150,\n                columnNumber: 25\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                onClick: () => {\n                  predict();\n                },\n                children: \"Predict\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 151,\n                columnNumber: 25\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"label-container\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Content, \"WYbeLg4lomZcjmwKc1WGj3zDTOk=\", false, function () {\n  return [useStyles];\n});\n\n_c = Content;\nexport default Content;\n\nvar _c;\n\n$RefreshReg$(_c, \"Content\");","map":{"version":3,"sources":["/Users/parkyoonsoo/Documents/GitHub/honsool-changyoong/src/routers/Content.js"],"names":["React","useState","load","Webcam","tf","tmImage","ImageUploader","makeStyles","Grid","Radio","Paper","Button","ButtonGroup","HeaderContent","cass","jinro","cham","bud","guin","jeju","tsing","blanc","chung","blanc_con","chung_con","jinro_con","URL","model","labelContainer","maxPredictions","useStyles","theme","root","flexGrow","display","flexDirection","alignItems","margin","spacing","paper","padding","textAlign","color","palette","text","secondary","init","modelURL","metadataURL","getTotalClasses","document","getElementById","i","appendChild","createElement","console","log","predict","image","getElementsByClassName","prediction","sort","a","b","probability","classPrediction","className","toFixed","childNodes","innerHTML","SorryText","err","picture","setPicture","Content","classes","onDrop","flex","marginLeft","marginRight"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport {load, Webcam} from '@teachablemachine/image';\nimport * as tf from '@tensorflow/tfjs';\nimport * as tmImage from '@teachablemachine/image';\nimport ImageUploader from 'react-images-upload';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Radio from '@material-ui/core/Radio';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\n\nimport HeaderContent from '../component/HeaderContent.js'\n\nimport cass from \"../static/wordCloud/cass.jpeg\";\nimport jinro from \"../static/wordCloud/jinro.jpeg\";\nimport cham from \"../static/wordCloud/cham.jpeg\";\nimport bud from \"../static/wordCloud/bud.jpeg\";\nimport guin from \"../static/wordCloud/guin.jpeg\";\nimport jeju from \"../static/wordCloud/jeju.jpeg\";\nimport tsing from \"../static/wordCloud/tsing.jpeg\";\nimport blanc from \"../static/wordCloud/blanc.jpeg\";\nimport chung from \"../static/wordCloud/chung.jpeg\";\n\nimport blanc_con from \"../static/recommend/blanc.jpeg\";\nimport chung_con from \"../static/recommend/chung.jpeg\";\nimport jinro_con from \"../static/recommend/jinro.jpeg\";\n\n\nconst URL = \"https://teachablemachine.withgoogle.com/models/smWPBnKM4/\";\n\nlet model, labelContainer, maxPredictions;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}));\n\n  // Load the image model and setup the webcam\nasync function init() {\n      const modelURL = URL + \"model.json\";\n      const metadataURL = URL + \"metadata.json\";\n\n      // load the model and metadata\n      // Refer to tmImage.loadFromFiles() in the API to support files from a file picker\n      // or files from your local hard drive\n      // Note: the pose library adds \"tmImage\" object to your window (window.tmImage)\n      model = await tmImage.load(modelURL, metadataURL);\n      maxPredictions = model.getTotalClasses();\n      labelContainer = document.getElementById(\"label-container\");\n      for (let i = 0; i < maxPredictions; i++) { // and class labels\n          labelContainer.appendChild(document.createElement(\"div\"));\n      }\n      console.log('on');\n  }\n\nasync function predict() {\n      // predict can take in an image, video or canvas html element\n      try{ \n        // console.log(webcam.canvas);\n        var image = document.getElementsByClassName(\"uploadPicture\")[0];\n        const prediction = await model.predict(image, false);\n        console.log(\"success\");\n        prediction.sort(function(a, b) {\n            return b.probability - a.probability;\n        });\n        const classPrediction = prediction[0].className + \": \" + prediction[0].probability.toFixed(2);\n\n        switch (prediction[0].className){\n            case \"cham\" :\n                labelContainer.childNodes[0].innerHTML = \"<img src=\"+cham+\">\";\n                break;\n            case \"bud\" :\n                labelContainer.childNodes[0].innerHTML = \"<img src=\"+bud+\">\";\n                break;\n            case \"tsing\" :\n                labelContainer.childNodes[0].innerHTML = \"<img src=\"+tsing+\">\";\n                break;\n            case \"blanc\" :\n                labelContainer.childNodes[0].innerHTML = \"<img src=\"+blanc+\">\";\n                labelContainer.childNodes[1].innerHTML = \"<img src=\"+blanc_con+\">\";\n                break;\n            case \"jinro\" :\n                labelContainer.childNodes[0].innerHTML = \"<img src=\"+jinro+\">\";\n                labelContainer.childNodes[1].innerHTML = \"<img src=\"+jinro_con+\">\";\n                break;\n            case \"cass\" :\n                labelContainer.childNodes[0].innerHTML = \"<img src=\"+cass+\">\";\n                break;\n            case \"chung\" :\n                labelContainer.childNodes[0].innerHTML = \"<img src=\"+chung+\">\";\n                labelContainer.childNodes[1].innerHTML = \"<img src=\"+chung_con+\">\";\n                break;\n            case \"guin\" :\n                labelContainer.childNodes[0].innerHTML = \"<img src=\"+guin+\">\";\n                break;\n            case \"jeju\" :\n                labelContainer.childNodes[0].innerHTML = \"<img src=\"+jeju+\">\";\n                break;\n            default :\n                var SorryText = \"아직 이 술은 준비가 안되었네요, 죄송해요!\"\n                labelContainer.childNodes[0].innerHTML = SorryText;\n        }\n\n      } catch(err) {\n        console.log(\"fail\");\n      }\n}\n\nlet picture, setPicture;\n\nconst Content = () => {\n    const classes = useStyles();\n\n    const [picture, setPicture] = useState([]);\n\n    const onDrop = picture => {\n        setPicture(picture);\n    };\n\n    return (\n        <div>\n        <HeaderContent/>\n        <div style = {{flex: 1, flexDirection: 'row', marginLeft : 30, marginRight : 30}}>\n            <Grid item xs={12} style = {{flex:1}}>\n            <Paper className={classes.paper}>\n                < ImageUploader\n                withIcon={true}\n                buttonText='이미지를 선택하세요'\n                onChange={onDrop}\n                imgExtension={['.jpg', '.gif', '.png', '.gif', '.jpeg']}\n                maxFileSize={5242880}\n                withPreview={true}\n                />\n                <div style = {{padding :20}}>\n                    <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\">\n                        <Button onClick={()=>{init()}}>Start</Button>\n                        <Button onClick={()=>{predict()}}>Predict</Button>\n                    </ButtonGroup>\n                </div>\n                <div id = \"label-container\">\n                </div>\n            </Paper>\n            </Grid>\n        </div>\n        </div>\n    );\n};\n\nexport default Content;"]},"metadata":{},"sourceType":"module"}