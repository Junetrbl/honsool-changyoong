[{"/Users/parkyoonsoo/Documents/GitHub/honsool-changyoong/src/index.js":"1","/Users/parkyoonsoo/Documents/GitHub/honsool-changyoong/src/reportWebVitals.js":"2","/Users/parkyoonsoo/Documents/GitHub/honsool-changyoong/src/App.js":"3","/Users/parkyoonsoo/Documents/GitHub/honsool-changyoong/src/routers/VotePage.js":"4","/Users/parkyoonsoo/Documents/GitHub/honsool-changyoong/src/routers/Community.js":"5","/Users/parkyoonsoo/Documents/GitHub/honsool-changyoong/src/routers/Home.js":"6","/Users/parkyoonsoo/Documents/GitHub/honsool-changyoong/src/routers/Content.js":"7","/Users/parkyoonsoo/Documents/GitHub/honsool-changyoong/src/component/HeaderContent.js":"8","/Users/parkyoonsoo/Documents/GitHub/honsool-changyoong/src/component/Header.js":"9","/Users/parkyoonsoo/Documents/GitHub/honsool-changyoong/src/component/ImageList.js":"10","/Users/parkyoonsoo/Documents/GitHub/honsool-changyoong/src/component/Vote.js":"11"},{"size":594,"mtime":1606195603743,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":1606022559748,"results":"14","hashOfConfig":"13"},{"size":568,"mtime":1606179804451,"results":"15","hashOfConfig":"13"},{"size":2985,"mtime":1606181763043,"results":"16","hashOfConfig":"13"},{"size":204,"mtime":1606083913230,"results":"17","hashOfConfig":"13"},{"size":3878,"mtime":1606080705999,"results":"18","hashOfConfig":"13"},{"size":5932,"mtime":1606264521000,"results":"19","hashOfConfig":"13"},{"size":454,"mtime":1606202052047,"results":"20","hashOfConfig":"13"},{"size":443,"mtime":1606180516531,"results":"21","hashOfConfig":"13"},{"size":6112,"mtime":1606221574000,"results":"22","hashOfConfig":"13"},{"size":1468,"mtime":1606180100529,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1db6ffe",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/parkyoonsoo/Documents/GitHub/honsool-changyoong/src/index.js",[],["51","52"],"/Users/parkyoonsoo/Documents/GitHub/honsool-changyoong/src/reportWebVitals.js",[],"/Users/parkyoonsoo/Documents/GitHub/honsool-changyoong/src/App.js",[],"/Users/parkyoonsoo/Documents/GitHub/honsool-changyoong/src/routers/VotePage.js",["53"],"import React from 'react';\nimport Header from \"../component/Header.js\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flex: 1,\n    flexDirection: 'column', \n    textAlign : 'center',\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n  formControl: {\n    margin: theme.spacing(3),\n  },\n}));\n\nconst VotePage = () => {\n    const classes = useStyles();\n    const [state, setState] = React.useState({\n        gilad: false,\n        jason: false,\n        antoine: false,\n        chicken : false\n    });\n    const handleChange = (event) => {\n        setState({ ...state, [event.target.name]: event.target.checked });\n    };\n\n    const { gilad, jason, antoine, chicken } = state;\n\n    return (\n        <div className={classes.root}>\n            <Header/>\n            <div>\n                <FormControl component=\"fieldset\" className={classes.formControl}>\n                    <h4 style = {{color : 'grey'}}> 당신의 선택으로 혼술 커뮤니티를 만들어가요 ☺️ </h4>\n                    <h2> 비오는 날에 가장 어울리는 혼술 조합은? 😋 ☔️</h2>\n                    {/* <FormLabel component=\"legend\"> 비오는 날에 가장 어울리는 혼술 조합은? </FormLabel> */}\n                    <FormGroup>\n                    <FormControlLabel\n                        control={<Checkbox checked={gilad} onChange={handleChange} name=\"gilad\" />}\n                        label=\"삼겹살🥓 + 소주\"\n                    />\n                    <FormControlLabel\n                        control={<Checkbox checked={jason} onChange={handleChange} name=\"jason\" />}\n                        label=\"파전 + 막걸리🍶\"\n                    />\n                    <FormControlLabel\n                        control={<Checkbox checked={antoine} onChange={handleChange} name=\"antoine\" />}\n                        label=\"치즈🧀 + 와인🍷\"\n                    />\n                    <FormControlLabel\n                        control={<Checkbox checked={chicken} onChange={handleChange} name=\"chicken\" />}\n                        label=\"치킨🍗 + 맥주🍺\"\n                    />\n                    </FormGroup>\n                    <FormHelperText> 최애를 골라주세요🤤 </FormHelperText>\n                </FormControl>\n            </div>\n             <Button variant=\"outlined\" color=\"secondary\" style = {{marginLeft : 100, marginRight : 100}}>\n                    투표하고 결과보기\n            </Button>\n        </div>\n    );\n};\n\nexport default VotePage;","/Users/parkyoonsoo/Documents/GitHub/honsool-changyoong/src/routers/Community.js",[],"/Users/parkyoonsoo/Documents/GitHub/honsool-changyoong/src/routers/Home.js",["54"],"import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ButtonBase from '@material-ui/core/ButtonBase';\nimport {Link, useHistory} from 'react-router-dom';\nimport logo from './logo.png';\nimport community from '../static/images/community.png'\nimport content from '../static/images/alcohol3.png'\n\nconst images = [\n  {\n    url: content,\n    title: 'Content',\n    width: '50%',\n    link: '/content/'\n  },\n  {\n    url: community,\n    title: 'Community',\n    width: '50%',\n    link: '/community/'\n  },\n];\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    minWidth: 300,\n    width: '100%',\n  },\n  image: {\n    position: 'relative',\n    height: 200,\n    [theme.breakpoints.down('xs')]: {\n      width: '100% !important', // Overrides inline-style\n      height: 100,\n    },\n    '&:hover, &$focusVisible': {\n      zIndex: 1,\n      '& $imageBackdrop': {\n        opacity: 0.15,\n      },\n      '& $imageMarked': {\n        opacity: 0,\n      },\n      '& $imageTitle': {\n        border: '4px solid currentColor',\n      },\n    },\n  },\n  focusVisible: {},\n  imageButton: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 0,\n    bottom: 0,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    color: theme.palette.common.white,\n  },\n  imageSrc: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 0,\n    bottom: 0,\n    backgroundSize: 'cover',\n    backgroundPosition: 'center 40%',\n  },\n  imageBackdrop: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    top: 0,\n    bottom: 0,\n    backgroundColor: theme.palette.common.black,\n    opacity: 0.4,\n    transition: theme.transitions.create('opacity'),\n  },\n  imageTitle: {\n    position: 'relative',\n    padding: `${theme.spacing(2)}px ${theme.spacing(4)}px ${theme.spacing(1) + 6}px`,\n  },\n  imageMarked: {\n    height: 3,\n    width: 18,\n    backgroundColor: theme.palette.common.white,\n    position: 'absolute',\n    bottom: -2,\n    left: 'calc(50% - 9px)',\n    transition: theme.transitions.create('opacity'),\n  },\n}));\n\nconst Home = () => {\n    const classes = useStyles();\n    const history = useHistory();\n\n    return (\n        <div>\n            <div>\n              <img \n              style={{\n                width: 350,\n                height: 350,\n                alignItems: 'center',\n                justifyContent: 'center',\n                display: 'block',\n                margin: '0 auto',\n                padding: 70,\n              }}\n              src={logo} alt={'logo'} />\n            </div>\n            <div className={classes.root}>\n            {images.map((image) => (\n                <ButtonBase\n                focusRipple\n                key={image.title}\n                className={classes.image}\n                focusVisibleClassName={classes.focusVisible}\n                style={{\n                    width: image.width,\n                }}\n                onClick={()=>{history.push(image.link)}}\n                >\n                <span\n                    className={classes.imageSrc}\n                    style={{\n                    backgroundImage: `url(${image.url})`,\n                    }}\n                />\n                <span className={classes.imageBackdrop} />\n                <span className={classes.imageButton}>\n                    <Typography\n                    component=\"span\"\n                    variant=\"subtitle1\"\n                    color=\"inherit\"\n                    className={classes.imageTitle}\n                    >\n                    {image.title}\n                    <span className={classes.imageMarked} />\n                    </Typography>\n                </span>\n              \n                </ButtonBase>\n            ))}\n            </div>\n        </div>\n    );\n};\n\nexport default Home;","/Users/parkyoonsoo/Documents/GitHub/honsool-changyoong/src/routers/Content.js",["55","56","57","58","59","60","61","62"],"import React, { useState } from 'react';\nimport {load, Webcam} from '@teachablemachine/image';\nimport * as tf from '@tensorflow/tfjs';\nimport * as tmImage from '@teachablemachine/image';\nimport ImageUploader from 'react-images-upload';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Radio from '@material-ui/core/Radio';\nimport Paper from '@material-ui/core/Paper';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\n\nimport HeaderContent from '../component/HeaderContent.js'\n\nimport cass from \"../static/wordCloud/cass.jpeg\";\nimport jinro from \"../static/wordCloud/jinro.jpeg\";\nimport cham from \"../static/wordCloud/cham.jpeg\";\nimport bud from \"../static/wordCloud/bud.jpeg\";\nimport guin from \"../static/wordCloud/guin.jpeg\";\nimport jeju from \"../static/wordCloud/jeju.jpeg\";\nimport tsing from \"../static/wordCloud/tsing.jpeg\";\nimport blanc from \"../static/wordCloud/blanc.jpeg\";\nimport chung from \"../static/wordCloud/chung.jpeg\";\n\nimport blanc_con from \"../static/recommend/blanc.jpeg\";\nimport chung_con from \"../static/recommend/chung.jpeg\";\nimport jinro_con from \"../static/recommend/jinro.jpeg\";\n\n\nconst URL = \"https://teachablemachine.withgoogle.com/models/smWPBnKM4/\";\n\nlet model, labelContainer, maxPredictions;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    '& > *': {\n      margin: theme.spacing(1),\n    },\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n  },\n}));\n\n  // Load the image model and setup the webcam\nasync function init() {\n      const modelURL = URL + \"model.json\";\n      const metadataURL = URL + \"metadata.json\";\n\n      // load the model and metadata\n      // Refer to tmImage.loadFromFiles() in the API to support files from a file picker\n      // or files from your local hard drive\n      // Note: the pose library adds \"tmImage\" object to your window (window.tmImage)\n      model = await tmImage.load(modelURL, metadataURL);\n      maxPredictions = model.getTotalClasses();\n      labelContainer = document.getElementById(\"label-container\");\n      for (let i = 0; i < maxPredictions; i++) { // and class labels\n          labelContainer.appendChild(document.createElement(\"div\"));\n      }\n      console.log('on');\n  }\n\nasync function predict() {\n      // predict can take in an image, video or canvas html element\n      try{ \n        // console.log(webcam.canvas);\n        var image = document.getElementsByClassName(\"uploadPicture\")[0];\n        const prediction = await model.predict(image, false);\n        console.log(\"success\");\n        prediction.sort(function(a, b) {\n            return b.probability - a.probability;\n        });\n        const classPrediction = prediction[0].className + \": \" + prediction[0].probability.toFixed(2);\n\n        switch (prediction[0].className){\n            case \"cham\" :\n                labelContainer.childNodes[0].innerHTML = \"<img src=\"+cham+\">\";\n                break;\n            case \"bud\" :\n                labelContainer.childNodes[0].innerHTML = \"<img src=\"+bud+\">\";\n                break;\n            case \"tsing\" :\n                labelContainer.childNodes[0].innerHTML = \"<img src=\"+tsing+\">\";\n                break;\n            case \"blanc\" :\n                labelContainer.childNodes[0].innerHTML = \"<img src=\"+blanc+\">\";\n                labelContainer.childNodes[1].innerHTML = \"<img src=\"+blanc_con+\">\";\n                break;\n            case \"jinro\" :\n                labelContainer.childNodes[0].innerHTML = \"<img src=\"+jinro+\">\";\n                labelContainer.childNodes[1].innerHTML = \"<img src=\"+jinro_con+\">\";\n                break;\n            case \"cass\" :\n                labelContainer.childNodes[0].innerHTML = \"<img src=\"+cass+\">\";\n                break;\n            case \"chung\" :\n                labelContainer.childNodes[0].innerHTML = \"<img src=\"+chung+\">\";\n                labelContainer.childNodes[1].innerHTML = \"<img src=\"+chung_con+\">\";\n                break;\n            case \"guin\" :\n                labelContainer.childNodes[0].innerHTML = \"<img src=\"+guin+\">\";\n                break;\n            case \"jeju\" :\n                labelContainer.childNodes[0].innerHTML = \"<img src=\"+jeju+\">\";\n                break;\n            default :\n                var SorryText = \"아직 이 술은 준비가 안되었네요, 죄송해요!\"\n                labelContainer.childNodes[0].innerHTML = SorryText;\n        }\n\n      } catch(err) {\n        console.log(\"fail\");\n      }\n}\n\nlet picture, setPicture;\n\nconst Content = () => {\n    const classes = useStyles();\n\n    const [picture, setPicture] = useState([]);\n\n    const onDrop = picture => {\n        setPicture(picture);\n    };\n\n    return (\n        <div>\n        <HeaderContent/>\n        <div style = {{flex: 1, flexDirection: 'row', marginLeft : 30, marginRight : 30}}>\n            <Grid item xs={12} style = {{flex:1}}>\n            <Paper className={classes.paper}>\n                < ImageUploader\n                withIcon={true}\n                buttonText='이미지를 선택하세요'\n                onChange={onDrop}\n                imgExtension={['.jpg', '.gif', '.png', '.gif', '.jpeg']}\n                maxFileSize={5242880}\n                withPreview={true}\n                />\n                <div style = {{padding :20}}>\n                    <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\">\n                        <Button onClick={()=>{init()}}>Start</Button>\n                        <Button onClick={()=>{predict()}}>Predict</Button>\n                    </ButtonGroup>\n                </div>\n                <div id = \"label-container\">\n                </div>\n            </Paper>\n            </Grid>\n        </div>\n        </div>\n    );\n};\n\nexport default Content;","/Users/parkyoonsoo/Documents/GitHub/honsool-changyoong/src/component/HeaderContent.js",[],"/Users/parkyoonsoo/Documents/GitHub/honsool-changyoong/src/component/Header.js",[],"/Users/parkyoonsoo/Documents/GitHub/honsool-changyoong/src/component/ImageList.js",["63","64","65","66","67","68"],"import React, {useState, useRef} from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport GridList from \"@material-ui/core/GridList\";\nimport GridListTile from \"@material-ui/core/GridListTile\";\nimport GridListTileBar from \"@material-ui/core/GridListTileBar\";\nimport ListSubheader from \"@material-ui/core/ListSubheader\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport InfoIcon from \"@material-ui/icons/Info\";\nimport Modal from \"@material-ui/core/Modal\";\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nimport Header from \"./Header.js\";\nimport Vote from \"./Vote.js\";\n\nimport blanc from \"../static/images/blanc.jpg\";\nimport cass from \"../static/images/cass.png\";\nimport hoegarden from \"../static/images/hoegarden.jpg\";\nimport jinro from \"../static/images/jinro.jpeg\";\nimport terra from \"../static/images/terra.jpg\";\nimport chungha from \"../static/images/chungha.jpg\";\n//추가\nimport { Link } from \"react-router-dom\";\n\nlet store, setStore;\n\n\n\nfunction rand() {\n  return Math.round(Math.random() * 20) - 10;\n}\n\nfunction getModalStyle() {\n  const top = 50 + rand();\n  const left = 50 + rand();\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: \"space-around\",\n    overflow: \"hidden\",\n    backgroundColor: theme.palette.background.paper,\n  },\n  gridList: {\n    width: 500,\n    height: 450,\n  },\n  icon: {\n    color: \"rgba(255, 255, 255, 0.54)\",\n  },\n  paper: {\n    position: \"absolute\",\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: '25ch',\n  },\n}));\n\nconst ImageList = () => {\n  const images = [\n  {\n    id: 1,\n    url: blanc,\n    title: \"블랑\",\n    width: \"50%\",\n    link: \"/content/\",\n    comment: [\n      {\n        writer: 'user1',\n        comment: '블랑 소맥이 특이합니다'\n      },\n      {\n        writer: 'user2',\n        comment: '명란 구이랑 같이 먹는 걸 추천해요'\n      },\n    ],\n  },\n  {\n    id: 2,\n    url: cass,\n    title: \"카스\",\n    width: \"50%\",\n    link: \"/community/\",\n    comment: [],\n  },\n  {\n    id: 3,\n    url: hoegarden,\n    title: \"호가든\",\n    width: \"50%\",\n    link: \"/community/\",\n    comment: [],\n  },\n  {\n    id: 4,\n    url: jinro,\n    title: \"진로\",\n    width: \"50%\",\n    link: \"/community/\",\n    comment: [],\n  },\n  {\n    id: 5,\n    url: terra,\n    title: \"테라\",\n    width: \"50%\",\n    link: \"/community/\",\n    comment: [],\n  },\n  {\n    id: 6,\n    url: chungha,\n    title: \"청하\",\n    width: \"50%\",\n    link: \"/community/\",\n    comment: [],\n  },\n];\n  const classes = useStyles();\n  const [modalStyle] = React.useState(getModalStyle);\n  const [open, setOpen] = React.useState(false);\n  //추가\n  const [body, setBody] = React.useState(null);\n  const [store, setStore] = React.useState(images);\n\n  //추가\n  const createBody = (tile) => {\n    return (\n      <div style={modalStyle} className={classes.paper}>\n        <h3 id=\"simple-modal-title\">{tile.title}</h3>\n        <img src={tile.url} alt={tile.title} \n        style={{\n                width: '100%',\n              }}/>\n        {tile.comment.map((comment)=>\n        <div\n        style = {{\n          display : 'flex'\n          }}>\n        <h4> {comment.writer} </h4>\n        <h5 style = {{paddingLeft : 10}}> {comment.comment} </h5>\n        </div>\n        )}\n        <div\n        style = {{\n          display : 'flex'\n        }}>\n          <TextField\n            id=\"standard-full-width\"\n            label=\"댓글\"\n            style={{ margin: 8 }}\n            placeholder=\"이 술은요...\"\n            inputRef = {userComment}\n            helperText=\"당신의 경험을 남겨주세요\"\n            fullWidth\n            margin=\"normal\"\n            InputLabelProps={{\n              shrink: true,\n            }}\n          />\n          <Button variant=\"contained\" color=\"primary\" onClick={() => addHandler(tile)}>\n            게시\n          </Button>\n        </div>\n        {/* <SimpleModal /> */}\n      </div>\n    );\n  };\n\n  const handleOpen = (tile) => {\n    setOpen(true);\n    //추가\n    setBody(createBody(tile));\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const userComment = useRef();\n\n  const addHandler = (tile) => {        \n        addItem(tile,\n        {\n            writer: 'user3',\n            comment: userComment.current.value\n        })\n  };\n\n\n  function addItem(tile, newItem) {\n    const target = store.findIndex((image) => image.id == tile.id);\n    const deleted = store.splice(target, 1)[0];\n    const newImage = {\n        ...deleted,\n        comment: [\n          ...deleted.comment,\n          newItem//이건 새로받은 comment임\n        ]\n      };\n\n    setStore([\n      newImage,\n      ...store,\n    ]);\n    setBody(createBody(newImage));\n  }\n\n  return (\n    <div className={classes.root}>\n      <Header />\n      <Vote/>\n      <GridList cellHeight={180} className={classes.gridList}>\n        {store.map((tile) => (\n          <GridListTile\n            key={tile.img}\n            onClick={\n              //추가\n              () => {\n                handleOpen(tile);\n              }\n            }\n          >\n            <img src={tile.url} alt={tile.title} />\n            <GridListTileBar\n              title={tile.title}\n              actionIcon={\n                <IconButton\n                  aria-label={`info about ${tile.title}`}\n                  className={classes.icon}\n                >\n                  <InfoIcon />\n                </IconButton>\n              }\n            />\n          </GridListTile>\n        ))}\n      </GridList>\n      <Modal\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"simple-modal-title\"\n        aria-describedby=\"simple-modal-description\"\n      >\n        {body}\n      </Modal>\n    </div>\n  );\n};\n\nexport default ImageList;\n","/Users/parkyoonsoo/Documents/GitHub/honsool-changyoong/src/component/Vote.js",[],{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":4,"column":8,"nodeType":"75","messageId":"76","endLine":4,"endColumn":17},{"ruleId":"73","severity":1,"message":"77","line":5,"column":9,"nodeType":"75","messageId":"76","endLine":5,"endColumn":13},{"ruleId":"73","severity":1,"message":"78","line":2,"column":9,"nodeType":"75","messageId":"76","endLine":2,"endColumn":13},{"ruleId":"73","severity":1,"message":"79","line":2,"column":15,"nodeType":"75","messageId":"76","endLine":2,"endColumn":21},{"ruleId":"73","severity":1,"message":"80","line":3,"column":13,"nodeType":"75","messageId":"76","endLine":3,"endColumn":15},{"ruleId":"73","severity":1,"message":"81","line":9,"column":8,"nodeType":"75","messageId":"76","endLine":9,"endColumn":13},{"ruleId":"73","severity":1,"message":"82","line":80,"column":15,"nodeType":"75","messageId":"76","endLine":80,"endColumn":30},{"ruleId":"73","severity":1,"message":"83","line":123,"column":5,"nodeType":"75","messageId":"76","endLine":123,"endColumn":12},{"ruleId":"73","severity":1,"message":"84","line":123,"column":14,"nodeType":"75","messageId":"76","endLine":123,"endColumn":24},{"ruleId":"73","severity":1,"message":"85","line":128,"column":12,"nodeType":"75","messageId":"76","endLine":128,"endColumn":19},{"ruleId":"73","severity":1,"message":"86","line":1,"column":16,"nodeType":"75","messageId":"76","endLine":1,"endColumn":24},{"ruleId":"73","severity":1,"message":"87","line":6,"column":8,"nodeType":"75","messageId":"76","endLine":6,"endColumn":21},{"ruleId":"73","severity":1,"message":"77","line":23,"column":10,"nodeType":"75","messageId":"76","endLine":23,"endColumn":14},{"ruleId":"73","severity":1,"message":"88","line":25,"column":5,"nodeType":"75","messageId":"76","endLine":25,"endColumn":10},{"ruleId":"73","severity":1,"message":"89","line":25,"column":12,"nodeType":"75","messageId":"76","endLine":25,"endColumn":20},{"ruleId":"90","severity":1,"message":"91","line":206,"column":56,"nodeType":"92","messageId":"93","endLine":206,"endColumn":58},"no-native-reassign",["94"],"no-negated-in-lhs",["95"],"no-unused-vars","'FormLabel' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'load' is defined but never used.","'Webcam' is defined but never used.","'tf' is defined but never used.","'Radio' is defined but never used.","'classPrediction' is assigned a value but never used.","'picture' is defined but never used.","'setPicture' is defined but never used.","'picture' is assigned a value but never used.","'useState' is defined but never used.","'ListSubheader' is defined but never used.","'store' is defined but never used.","'setStore' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]